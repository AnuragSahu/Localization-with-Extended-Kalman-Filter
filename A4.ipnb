@@ -0,0 +1,177 @@
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# import the dataset\n",
    "dataset = np.load('dataset.npz')\n",
    "dt = 0.1\n",
    "t = dataset['t'] # 12609 X 1 timesamples\n",
    "x_true = dataset['x_true'] # 12609 X 1 true x-position\n",
    "y_true = dataset['y_true'] # 12609 X 1 true y-position\n",
    "th_true = dataset['th_true'] # 12609 X 1 true theta-position\n",
    "l = dataset['l'] # 17 X 2 position of 17 landmarks\n",
    "r = dataset['r'] # 12609 X 17 something complicated\n",
    "r_var = dataset['r_var'] # 1\n",
    "b = dataset['b'] # 12609 X 17 angle\n",
    "b_var = dataset['b_var'] # 1\n",
    "v = dataset['v'] # 12609 X 1 speed\n",
    "v_var = dataset['v_var'] # 1\n",
    "om = dataset['om'] # 12609 X 1 rotational speed\n",
    "om_var = dataset['om_var'] # 1\n",
    "d = dataset['d'] # the distance between the center of the robot and the laser rangefinder\n",
    "\n",
    "\n",
    "#plt.plot(x_true,y_true)\n",
    "#plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_mu(index, x_true,y_true,th_true,l):\n",
    "    l_mu = [x_true[index][0], y_true[index][0], th_true[index][0]]\n",
    "    for i in range(len(l)):\n",
    "            l_mu.append(l[i][0])\n",
    "            l_mu.append(l[i][1])\n",
    "    return np.array(l_mu)\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_sig(mu):\n",
    "    a = np.zeros([len(mu),len(mu)])\n",
    "    return a\n",
    "\n",
    "def update_sig(sig,Gxt):\n",
    "    cor_xx = sig[:3, :3]\n",
    "    cor_xm = sig[:3,3:37]\n",
    "    cor_mx = sig[3:37,:3]\n",
    "    cor_xx = Gxt.dot(cor_xx).dot(Gxt.T)\n",
    "    cor_xm = Gxt.dot(cor_xm)\n",
    "    cor_mx = cor_xm.T\n",
    "    sig[:3,:3] = cor_xx\n",
    "    sig[:3,3:37] = cor_xm\n",
    "    sig[3:37,:3] = cor_mx\n",
    "    return sig"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "def predict_mu(index,mu,vk,omk):\n",
    "    F = np.zeros([3,37])\n",
    "    F[0,0] = 1\n",
    "    F[1,1] = 1\n",
    "    F[2,2] = 0.1\n",
    "    post_mult = (vk[index])\n",
    "    post_mult = np.append(post_mult,omk[index])\n",
    "    post_mult *= dt\n",
    "    pre_mult = np.array([[np.cos(mu[2]),0],[np.sin(mu[2]),0],[0,1]])\n",
    "    g = pre_mult.dot(post_mult)\n",
    "    g = F.T.dot(g)\n",
    "    g += mu\n",
    "    mu = g\n",
    "    return mu"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_Gxt(v,th):\n",
    "    return np.array([[1, 0, -v*np.sin(th)],\n",
    "                     [0, 1, v*np.cos(th)],\n",
    "                     [0, 0, 1]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_G(Gxt):\n",
    "    tmp = np.zeros((3,34))\n",
    "    eye = np.eye(34)\n",
    "    G = np.append(Gxt,tmp,axis=1)\n",
    "    G1 = np.append(tmp.T,eye,axis=1)\n",
    "    G = np.append(G,G1,axis=0)\n",
    "    return G"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0. 0. 0. ... 0. 0. 0.]\n",
      " [0. 0. 0. ... 0. 0. 0.]\n",
      " [0. 0. 0. ... 0. 0. 0.]\n",
      " ...\n",
      " [0. 0. 0. ... 0. 0. 0.]\n",
      " [0. 0. 0. ... 0. 0. 0.]\n",
      " [0. 0. 0. ... 0. 0. 0.]]\n"
     ]
    }
   ],
   "source": [
    "i = 0\n",
    "v += v_var\n",
    "om += om_var\n",
    "mu = get_mu(i,x_true,y_true,th_true,l)\n",
    "g = predict_mu(i,mu,v,om)\n",
    "sig = get_sig(mu)\n",
    "Gxt = get_Gxt(v[i][0],mu[2])\n",
    "#G = get_G(Gxt)\n",
    "#sig = G.T.dot(sig).dot(G) #+ Rt\n",
    "sig = update_sig(sig,Gxt)\n",
    "print(sig)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
